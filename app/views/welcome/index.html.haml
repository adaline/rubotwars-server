:sass
  #game_canvas:-webkit-full-screen
    width: 100%
    height: auto

:coffeescript
  $ ->
    canvas = document.getElementById("game_canvas")
    context = canvas.getContext("2d")

    window.AudioContext = window.AudioContext || window.webkitAudioContext
    audio_context = new AudioContext()

    map = [
      [1,0,0,0,0,0,0,0,0,0],
      [0,9,0,0,0,0,0,0,9,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,9,0,0,0,0,0,0,9,0],
      [0,0,0,0,0,0,0,0,0,1]
    ]

    bots = []
    bot_animations = {}

    canvas.addEventListener 'start', (e) ->
      map = e.detail.map
      bots = e.detail.bots

    canvas.addEventListener 'update', (e) ->
      map = e.detail.map
      bots = e.detail.bots

    canvas.addEventListener 'fire', (e) ->
      bot = e.detail.bot
      bot_animations[bot.key] = { index: 1, duration: 10 }
      play_sound(sounds.punch)

    canvas.addEventListener 'game_over', (e) ->
      winner_bot = e.detail.winner
      console.log "Winner: \#{winner_bot.name}"
      play_sound(sounds.blast)

    images = {
      bg: { url: "#{image_url("bg.png")}"}
      block: { url: "#{image_url("block.png")}"}
      bots: { url: "#{image_url("bots.png")}"}
    }

    sounds = {
      punch: { url: "#{image_url('punch.mp3')}" }
      blast: { url: "#{image_url('blast.mp3')}" }
    }

    for k, v of images
      image = new Image()
      do (v) ->
        image.onload = ->
          v.loaded = true
      image.src = v.url
      v.data = image

    process_sound = (data, sound) ->
      audio_context.decodeAudioData data, (buffer) ->
        sound.buffer = buffer
        sound.loaded = true

    for k, v of sounds
      request = new XMLHttpRequest()
      request.open('GET', v.url, true)
      request.responseType = 'arraybuffer'
      do (v, request) ->
        request.onload = ->
          process_sound(request.response, v)
      request.send()

    play_sound = (sound) ->
      if sound.loaded
        source = audio_context.createBufferSource()
        source.buffer = sound.buffer
        source.connect(audio_context.destination)
        source.start(0)

    draw_map = (context, map) ->
      for row, y in map
        for tile, x in row
          if tile == 9 && images.block.loaded
            context.drawImage(images.block.data, x*40, y*40)

    draw_bots = (context, bots) ->
      if bots.length > 0 && images.bots.loaded
        for bot, index in bots
          action_index = 0
          if bot_animations[bot.key] && bot_animations[bot.key].duration > 0
            action_index = bot_animations[bot.key].index
            bot_animations[bot.key].duration--
          bot_index = (index * 80) + (action_index * 40)
          switch bot.direction
            when 'right'
              context.drawImage(images.bots.data, 0, bot_index, 40, 40, bot.x * 40, bot.y * 40, 40, 40)
            when 'up'
              context.drawImage(images.bots.data, 40, bot_index, 40, 40, bot.x * 40, bot.y * 40, 40, 40)
            when 'left'
              context.drawImage(images.bots.data, 80, bot_index, 40, 40, bot.x * 40, bot.y * 40, 40, 40)
            when 'down'
              context.drawImage(images.bots.data, 120, bot_index, 40, 40, bot.x * 40, bot.y * 40, 40, 40)


    draw = ->
      context.clearRect(0, 0, canvas.width, canvas.height)
      context.drawImage(images.bg.data, 0, 0) if images.bg.loaded
      draw_map(context, map)
      draw_bots(context, bots)
      requestAnimationFrame(draw)

    draw()

    $('#full_screen_link').on 'click', ->
      canvas.webkitRequestFullscreen()

%canvas#game_canvas{ width: '400', height: '400'}

%a#full_screen_link Full screen
